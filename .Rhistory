group_by(State) %>%
top_n(n = 20, wt = Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
head(a)
r <- read.csv("a3-data/outcome-of-care-measures.csv", colClasses = "character")
r$rank <- unlist(lapply(split(r[11], list(r$State), drop = T), rank, int))
?rank
r$rank <- unlist(lapply(split(r[11], list(r$State), drop = T), rank, ties.method = "min"))
x <- data.frame(r[2], r[7], lapply(r[11], as.numeric))
head(x)
x <- data.frame(r[2], r[7], lapply(r[11], as.numeric), r[47])
head(x)
a = x[rank == 1]
a = x[rank = 1]
a = x[x$rank = 1]
a = x[x$rank = 1,]
a = x[x$rank == 1,]
head(a)
a = x[x$rank == 20,]
head(a)
head(a,10)
f = f[order(a[2], a[1]),]
head(f)
f = f[order(a[1], a[2]),]
head(f)
f = f[order(a[1]),]
head(f)
r$rank <- unlist(lapply(split(r[11], list(r$State), drop = T), rank, ties.method = "first"))
x <- data.frame(r[2], r[7], lapply(r[11], as.numeric), r[47])
a = x[x$rank == 20,]
head(a)
tail(a)
a
r$rank <- unlist(lapply(split(r[11], list(r$State), drop = T), rank, ties.method = "min"))
x <- data.frame(r[2], r[7], lapply(r[11], as.numeric), r[47])
head(x)
x
head(a)
head(x)
x = x[order(x[2]),]
head(x)
a = x[x$rank == 20,]
head(a)
a = x[x$rank == 1,]
a
head(x[x$rank == ,],10)
head(x[x$rank == ,2],10)
a = x[x$rank == 2,]
x[x$rank == 2,]
x[x$rank == 19,]
x[x$rank == 3,]
x[x$rank == 20,]
x[x$rank == 20,]
x[x$rank == 21,]
x[x$rank == 22,]
x[x$rank == 18,]
x[x$rank == 17,]
x[x$rank == 16,]
x[x$rank == 15,]
x[x$rank == 14,]
x[x$rank == 13,]
x[x$rank == 12,]
x[x$rank == 11,]
x[x$rank == 10,]
x[x$rank == 9,]
x[x$rank == 8,]
x[x$rank == 7,]
x[x$rank == 6,]
x[x$rank == 5,]
r$rank <- unlist(lapply(split(r[11], list(r$State), drop = T), rank, ties.method = "max"))
x[x$rank == 5,]
x[x$rank == 6,]
x[x$rank == 20,]
x[x$rank == 8,]
x[x$rank == 9,]
x[x$rank == 10,]
x[x$rank == 11,]
x[x$rank == 12,]
x[x$rank == 13,]
x[x$rank == 14,]
x[x$rank == 15,]
x[x$rank == 16,]
x[x$rank == 17,]
x[x$rank == 18,]
x[x$rank == 19,]
x[x$rank == 20,]
x[x$rank == 21,]
r <- read.csv("a3-data/outcome-of-care-measures.csv", colClasses = "character")
top_n(n = 20, wt = Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
r %>%
group_by(State) %>%
mutate(my_ranks = order(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, Hospital.Name, decreasing=TRUE))
dim(r)
r <- read.csv("a3-data/outcome-of-care-measures.csv", colClasses = "character")
View
r <- read.csv("a3-data/outcome-of-care-measures.csv", colClasses = "character")
row.names(r) <- NULL
head(r)
Ranking <- transform(r, Rank = ave (Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, State, FUN = function(x)
rank (-x, ties.method ="min")))
r <- read.csv("a3-data/outcome-of-care-measures.csv", colClasses = "character")
sorted <- r %>%
arrange(State, -Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack) %>%
group_by(State) %>%
mutate(rank=row_number())
print.data.frame(sorted)
sorted <- r %>%
arrange(State, -Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack) %>%
group_by(State) %>%
mutate(rank=row_number())
sorted <- r %>%
arrange(State, -r[11]) %>%
group_by(State) %>%
mutate(rank=row_number())
sorted <- r %>%
arrange(State, r[11]) %>%
group_by(State) %>%
mutate(rank=row_number())
head(sorted)
dim(sorted)
sorted[sorted$rank == 20,]
sorted <- r %>%
arrange(r[11]) %>%
group_by(State) %>%
mutate(rank=row_number())
sorted[sorted$rank == 20,]
sorted <- r %>%
arrange(State, r[11]) %>%
group_by(State) %>%
mutate(rank=row_number())
s <- r %>%
arrange(State, r[11]) %>%
group_by(State) %>%
mutate(rank=row_number())
head(s)
s[s$rank == 20,]
r <- read.csv("a3-data/outcome-of-care-measures.csv", colClasses = "character")
a = split(r, r$State)
head(a)
r <- read.csv("a3-data/outcome-of-care-measures.csv", colClasses = "character")
a = <- data.frame(r[2],r[7], lapply(a[11], as.numeric))
a = data.frame(r[2],r[7], lapply(a[11], as.numeric))
a = data.frame(r[2],r[7], lapply(r[11], as.numeric))
head(a,3)
colnames(a[3]) = "v"
head(a,3)
colnames(a)[3] = "v"
head(a,3)
s = split(a, state)
s = split(a, State)
s = split(a, a$State)
head(s)
s$CO
s$CO[2]
s$CO[2,]
b = lapply(s, function(x){x[2,]})
head(b)
b = lapply(s, function(x){x[20,]})
head(b,10)
b = lapply(s, function(x){z = x[order([x[3], x[1]),] z[20,]})
b = lapply(s, function(x){z = x[order(x[3], x[1]),] z[20,]})
b = lapply(s, function(x){z = x[order(x[3], x[1]),]
z[20,]})
head(b)
b = sapply(s, function(x){z = x[order(x[3], x[1]),]
z[20,]})
head(b)
b = lapply(s, function(x){z = x[order(x[3], x[1]),]
z[20,]})
head(b,1)
do.call("rbind", b)
a = data.frame(r[2],r[7], lapply(r[11], as.numeric))
cnt = lapply(s, function(x) { nrows(x)})
cnt = lapply(s, function(x) { nrow(x)})
head(cnt)
tail(cnt)
b = lapply(s, function(x){z = x[order(x[3], x[1]),]
a = data.frame(r[2],r[7], lapply(r[17], as.numeric))
s = split(a, a$State)
b = lapply(s, function(x){z = x[order(x[3], x[1]),]
z[10,]})
a = data.frame(r[2],r[7], lapply(r[11], as.numeric))
s = split(a, a$State)
b = lapply(s, function(x){z = x[order(x[3], x[1]),]
z[10,]})
head(b)
tail(b)
tail(b, 10)
a = data.frame(r[2],r[7], lapply(r[17], as.numeric))
s = split(a, a$State)
b = lapply(s, function(x){z = x[order(x[3], x[1]),]
z[10,]})
tail(b, 10)
a = data.frame(r[2],r[7], lapply(r[11], as.numeric))
s = split(a, a$State)
b = lapply(s, function(x){z = x[order(x[3], x[1]),]
z[20,]})
head(b)
head(b,10)
a = data.frame(r[2],r[7], lapply(r[23], as.numeric))
b = lapply(s, function(x){z = x[order(x[3], x[1]),]
z[nrow(z),]})
tail(b,3)
a = data.frame(r[2],r[7], lapply(r[23], as.numeric))
c = complete.cases(x[3])
c = complete.cases(a[3])
a = a[c,]
s = split(a, a$State)
b = lapply(s, function(x){z = x[order(x[3], x[1]),]
z[nrow(z),]})
tail(b, 3)
##find best hopital
rankall <- function(outcome, num = "best") {
r <- read.csv("a3-data/outcome-of-care-measures.csv", colClasses = "character")
if (num == "best") {
num = 1
}
# sorted <- r %>%
#   arrange(State, r[11]) %>%
#   group_by(State) %>%
#   mutate(rank=row_number())
# works, but needs to force an NA when the state does not have the ranking
# needed columns
#11 Heart.Attack
#17 Heart.Failure
#23 Pneumonia
if (outcome == "heart attack") {
#r$rank <- unlist(lapply(split(r[11], list(r$State), drop = T), rank))
a = data.frame(r[2],r[7], lapply(r[11], as.numeric))
} else if (outcome == "heart failure") {
#r$rank <- unlist(lapply(split(r[17], list(r$State), drop = T), rank))
a = data.frame(r[2],r[7], lapply(r[17], as.numeric))
} else if (outcome == "pneumonia") {
#r$rank <- unlist(lapply(split(r[23], list(r$State), drop = T), rank))
a = data.frame(r[2],r[7], lapply(r[23], as.numeric))
} else {
print("invalid outcome")
stop("invalid outcome");
}
# c = complete.cases(x[2])
# f = x[c,]
# f = f[order(f[2],f[1]),]
c = complete.cases(a[3])
a = a[c,]
s = split(a, a$State)
if (is.numeric(num)) {
b = lapply(s, function(x){z = x[order(x[3], x[1]),]
z[num,]})
} else if (num == "worst") {
b = lapply(s, function(x){z = x[order(x[3], x[1]),]
z[nrow(z),]})
} else if (num > nrow(f)) {
print("NA")
}
return(do.call("rbind", b))
}
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
head(rankall("heart attack", 20), 10)
##find best hopital
rankhospital <- function(state, outcome, num = "best") {
r <- read.csv("a3-data/outcome-of-care-measures.csv", colClasses = "character")
##get by state Abbr
a = r[r$State == state,]
if (nrow(a) == 0) {
print("invalid state")
stop("invalid state")
}
if (num == "best") {
num = 1
}
# needed columns
#11 Heart.Attack
#17 Heart.Failure
#23 Pneumonia
if (outcome == "heart attack") {
x <- data.frame(a[2], lapply(a[11], as.numeric))
} else if (outcome == "heart failure") {
x <- data.frame(a[2], lapply(a[17], as.numeric))
} else if (outcome == "pneumonia") {
x <- data.frame(a[2], lapply(a[23], as.numeric))
} else {
print("invalid outcome")
stop("invalid outcome");
}
c = complete.cases(x[2])
f = x[c,]
f = f[order(f[2],f[1]),]
if (is.numeric(num)) {
print(f[num,1])
} else if (num == "worst") {
print(f[nrow(f),1])
} else if (num > nrow(f)) {
print("NA")
}
# return(f)
}
##find best hopital
best <- function(state, outcome) {
r <- read.csv("a3-data/outcome-of-care-measures.csv", colClasses = "character")
##get by state Abbr
a = r[r$State == state,]
if (nrow(a) == 0) {
print("invalid state")
stop("invalid state")
}
# needed columns
#11 Heart.Attack
#17 Heart.Failure
#23 Pneumonia
if (outcome == "heart attack") {
x <- data.frame(a[2], lapply(a[11], as.numeric))
} else if (outcome == "heart failure") {
x <- data.frame(a[2], lapply(a[17], as.numeric))
} else if (outcome == "pneumonia") {
x <- data.frame(a[2], lapply(a[23], as.numeric))
} else {
print("invalid outcome")
stop("invalid outcome");
}
c = complete.cases(x[2])
f = x[c,]
f = f[order(f[2], f[1]),]
print(f[1,1])
#return(f)
}
outcome <- read.csv("a3-data/outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
ncol(outcome)
names(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
## You may get a warning about NAs being introduced; that is okay
hist(outcome[, 11])
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
rankhospital("MD", "heart failure", 5)
rankhospital("TX", "heart failure", 5)
rankhospital("TX", "heart failure", 6)
rankhospital("TX", "heart failure", 1)
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)
str(r)
t = subset(r, state == "HI")
t = subset(r, State == "HI")
t
r <- rankall("heart attack", 4)
as.character(subset(r, State == "HI")$hospital)
r <- rankall("pneumonia", "worst")
p = as.character(subset(r, State == "NJ")$hospital)
p
r <- rankall("pneumonia", "worst")
subset(r, State == "NJ")$hospital
r <- rankall("pneumonia", "worst")
subset(r, State == "NJ")
r <- rankall("heart failure", 10)
subset(r, State == "NV")
read.csv('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv')
p = read.csv('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv')
head(p)
head(p, 1)
v = p[p$VAL >= 1000000]
v = p[p$VAL > 1000000]
v = p[p$VAL >= 1000000,]
head(v)
nrow(v)
library(xlsx)
install.page(xlsx)
install.page('xlsx')
install.page(XLXS)
library(XLSX)
install.packages("xlsx")
library("xlsx")
read.xlsx('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx')
read.xlsx('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx', sheet=1)
install.packages("rJava")
library("xlsx")
library("rJava")
require(RCurl)
require(gdata)
install.packages("xlsx")
library("xlsx")
remove.packages(rJava)
install.packages(rJava)
install.packages("rJava")
library("xlsx")
install.packages("rJava")
library("xlsx")
library("xml")
install.packages("xml")
install.packages("XML")
library("xml")
library("XML")
data <- xmlParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
data <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
data <- xmlTreeParse("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
head(data)
xmlName(data)
r = xmlRoot(data)
r$row$zipcode
r$row
head(r)
z = xpathSApply(r,"/row/zipcode",xmlValue)
head(z)
warnings()
install.packages("rJava")
library("xlsx")
library("xlsx")
r[[1]]
xpathSApply(r,"//zipcode", xmlValue)
v = xpathSApply(r,"//row", xmlValue)
v
zz
aa
aa = xpathSApply(r,"//row", xmlValue)
aa
data <- xmlTreeParse("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternalNodes = TRUE)
r = xmlRoot(data)
aa = xpathSApply(r,"//row/zipcode", xmlValue)
aa
nrow(aa)
length(aa)
summary(aa)
str(aa)
grep("21231", aa)
length(agrep("21231", aa))
aa = xpathSApply(r,"//row/zipcode", xmlValue == 21231)
aa = xpathSApply(r,"//row/zipcode", xmlValue == "21231")
aa = xpathSApply(r,"//row/zipcode", xmlValue)
aa[1]
str(aa)
aa["21231"]
cnt = aa["21231"]
cnt
cnt = aa[21231]
cnt
cnt = lapply(aa, function(x) { cnt = 0
if (x == "21231") { cnt = cnt + 1 }
return cnt })
cnt = lapply(aa, function(x) { cnt = 0
if (x == "21231") { cnt = cnt + 1 }
return(cnt) })
cnt
length(cnt)
cnt
cnt = 0
lapply(aa, function(x) {
if (x == "21231") { cnt = cnt + 1 } })
cnt
if (x == "21231") { print(T) } })
t = table(aa)
head(t)
t[20]
t[names(t)==21231]
p = read.csv('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv
')
p = read.csv('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv')
file = tempfile()
write.table(p, file=file row.names=F, col.names=T, sep="\t", quote=F)
write.table(p, file=file, row.names=F, col.names=T, sep="\t", quote=F)
system.time(fread(file))
fread
libary(data.table)
libary("data.table")
system.time(data.table::fread(file))
library(data.table)
install.packages("data.table")
library("data.table")
system.time(fread(file))
DT = data.table(file)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time({mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
system.time({sapply(split(DT$pwgtp15,DT$SEX),mean)})
system.time({DT[,mean(pwgtp15),by=SEX]})
system.time({mean(DT$pwgtp15,by=DT$SEX)]})
system.time({mean(DT$pwgtp15,by=DT$SEX)})
system.time({rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
DT[1]
DT[2]
DT[3]
DT data.table(p)
DT = data.table(p)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
tapply(DT$pwgtp15,DT$SEX,mean)
system.time({tapply(DT$pwgtp15,DT$SEX,mean)})
install.packages("xlsx")
library("xlsx")
read.xls(xlPath, sheetIndex=1, colIndex=7:15, rowIndex=18:23)
xlPath = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
install.packages("xlsx")
library("xlsx")
install.packages("rJava")
library("xlsx")
library("rJava")
